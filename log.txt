# Poma 项目开发日志

## 2025-08-25 - 项目启动

### 14:30 - 需求分析和产品定位

### 产品定位确定
- 定位：播客版的 Kindle Highlights，不做播放器，而是做现有平台的"书签层"
- 目标场景：跑步、通勤等移动场景的 casual listening
- 核心用户：Spotify + Android Pixel 7a + Pixel Buds Pro 用户

### 核心功能设计
- Pixel Buds Pro 长按手势触发语音笔记
- Pixel 手机 Quick Tap（背部双击）作为备选触发方式
- Spotify API 集成获取播放状态和时间戳
- 语音转文字 + AI 总结功能

### 技术栈选择
- 移动端：Android 原生（Kotlin + Jetpack Compose）
- 后端：FastAPI (Python)
- 数据库：PostgreSQL + Redis
- AI 服务：Whisper API + GPT-4

### 开发路线图
- Phase 1：Spotify 授权 → 播放状态获取 → 语音笔记 → 基础回顾界面
- Phase 2：AI 上下文捕获 → 内容总结 → 周期性回顾
- Phase 3：多平台支持 → 可视化统计

### 15:45 - 项目结构搭建完成
- 创建完整的前后端分离架构
- Android 客户端：Kotlin + Jetpack Compose + Navigation
- 后端：FastAPI + PostgreSQL + Redis
- 关键 Android 组件：
  - QuickBookmarkTileService：Quick Settings 快捷开关
  - MediaListenerService：监听播放状态
  - 三个主要页面：HomeScreen, BookmarksScreen, SettingsScreen
- 后端 API 结构：
  - /auth：用户认证
  - /spotify：Spotify 集成
  - /bookmarks：书签管理
- 硬件集成支持：Quick Tap、Pixel Buds Pro 长按手势

### 16:15 - 设备信息更正
- 耳机设备：Pixel Buds Pro（非 Pro 2）
- 已更新所有相关文档和代码注释

### 16:20 - Android 架构说明和登录方式设计
- 创建详细的 Android 架构文档 (MVVM + Clean Architecture)
- 确定登录认证方案：
  - 主要方式：Google 登录 (适合 Pixel 用户) + 邮箱密码登录
  - 扩展方式：Spotify 直接登录 (未来)
  - 技术实现：JWT Token + EncryptedSharedPreferences
  - 安全设计：HTTPS + Certificate Pinning

### 16:25 - Google 登录设置评估
- Google 登录设置时间评估：约30-60分钟
- 主要步骤简单，无复杂配置

### 16:40 - Google 登录代码实现完成
- Android 端：
  - 添加 Google Sign-In 依赖和插件
  - 创建 LoginScreen 登录界面
  - 实现 AuthViewModel 状态管理
  - 更新导航从登录页面开始
- 后端：
  - 添加 google-auth 依赖
  - 实现 /api/v1/auth/google 登录接口
  - Google ID Token 验证逻辑
  - JWT Token 生成和返回
- 配置文件：
  - google-services.json 模板
  - 环境变量配置示例
- 下一步：需要 Google Cloud Console 配置才能测试

### 16:45 - 开始 Google Cloud Console 配置
- 准备配置 Google OAuth 2.0 凭据
- 项目名称：POMA（大写，无影响）
- 注意：不要启用已废弃的 Google+ API
- 直接配置 OAuth 2.0 凭据即可
- 跳过 API 启用，直接配置 OAuth 同意屏幕
- 创建完整 Android 项目结构和 gradlew 文件
- 修复 gradle-wrapper.jar 缺失问题
- 成功获取 SHA-1 指纹：22:B0:77:DC:81:7B:C7:FF:B6:2D:30:E1:F2:D3:0A:21:2F:A0:23:82
- 清理错误的 {app 目录，项目结构现已正常
- 开始创建 Google OAuth 客户端（英文界面指导）
- 更新完整的 google-signin-setup.md 文档，包含详细的英文界面操作步骤
- 用户询问 keytool 命令获取指纹的替代方法
- 用户下载了错误的 JSON 文件（Web 应用凭据而非 Android google-services.json）
- 手动创建了正确格式的 google-services.json 文件
- 更新 Android 代码和后端环境变量，配置完成
- 用户询问 Firebase 的作用和用途
- 确认不需要额外创建 Firebase 项目，现有配置已足够
- 用户询问后端是否需要 Python 虚拟环境
- 用户询问 uvicorn 命令的作用
- 成功创建 Python 虚拟环境并安装依赖
- 后端服务器成功启动在 http://localhost:8001
- API 测试通过：根路径和健康检查接口正常
- 创建一键启动后端的脚本文件
- 整理项目结构，将脚本文件移动到 scripts/ 目录
- 创建主控制脚本 ./poma 统一管理所有开发命令
- 支持 dev 模式、状态检查、清理等功能
- 更新文档以反映新的项目结构
- Android 构建失败：缺少必要的资源文件（图标、样式、XML文件）
- 用户询问数据库选择和 Android 开发环境要求

### 17:30 - Android 资源文件修复和构建成功
- 创建完整的 Android 资源文件：
  - 主题和颜色定义：themes.xml, colors.xml
  - 应用图标：ic_launcher.png (所有密度)，ic_launcher_round.png
  - XML 配置文件：data_extraction_rules.xml, backup_rules.xml
  - 界面图标：ic_bookmark.xml
- 解决 Material3 主题兼容性问题，使用标准 Android Material 主题
- Android 构建成功：生成 10M 的 Debug APK
- 创建 memory/ 目录用于存储压缩摘要文件
- 用户询问 Android 资源文件的作用和为什么最初没有创建

### 18:00 - Android 应用网络连接和 API 实现
- 诊断 Google 登录问题：手机无法连接 localhost:8001
- 获取电脑实际 IP：192.168.1.41，修改 Android API 配置
- 实现完整的 AuthApiService 类：
  - 配置 Retrofit 连接到 http://192.168.1.41:8001/api/v1/
  - 实现 GoogleSignIn 和 getCurrentUser API 调用
  - 创建 AuthApi 接口和相关数据类
- 实现 TokenManager：简化版本用于开发测试
- 修复字段名问题：access_token vs accessToken
- 添加网络安全配置：允许 HTTP 连接到本地 IP
- 扫描并修复所有关键 TODO 项目
- 创建 Android 测试指南文档：详细的设备设置和测试流程
- 应用重新构建成功，准备手机端测试

## 2025-08-26 - Google 登录调试和修复

### 01:30 - Google 登录首次测试失败
- 测试环境设置：后端运行在 0.0.0.0:8001，手机连接同网络
- Google 登录 UI 正常工作，但点击后直接返回登录界面
- 添加调试日志跟踪 Google Sign-In 流程
- 版本更新：v1.0.1-debug (Build 2) - Debug Logs

### 02:00 - 深度调试 Google OAuth 流程
- 发现 Google Sign-In 返回 RESULT_CANCELED (resultCode = 0)
- 日志显示选择 Google 账户后未获取到 ID Token
- 排除 Firebase 依赖问题，确认使用纯 Google OAuth 集成
- 发现问题可能在于 OAuth Client ID 配置错误

### 02:30 - 硬编码 OAuth Client ID 临时测试
- 将 OAuth Client ID 硬编码到应用中进行测试
- 版本更新：v1.0.2-debug (Build 3) - Hardcoded Client ID
- Google Sign-In 仍然返回 RESULT_CANCELED
- 确认问题不在于 BuildConfig 配置

### 03:00 - OAuth 配置深度分析
- 研究发现使用 Android Client ID 进行 requestIdToken() 可能有问题
- Google OAuth 文档显示需要 Web Client ID 用于 ID Token 生成
- 版本更新进度：v1.0.3-debug → v1.0.4-debug → v1.0.5-debug → v1.0.6-debug
- 通过 adb logcat 确认 Google Sign-In UI 工作正常但回调失败

### 04:00 - 发现根本原因并实施修复
- 确认问题：Android Client ID 不能用于 requestIdToken()
- 解决方案：必须使用 Web Application Client ID
- 用户创建新的 Web Client ID: 882585452174-e4ehsoof2jm9ccs3olh16t5qk9mtokkq.apps.googleusercontent.com
- 实施修复：替换 LoginScreen.kt 中的 Client ID
- 版本更新：v1.0.7-debug (Build 8) - Web Client ID
- 应用重新构建并安装成功，等待测试结果

### 技术要点总结
- Google OAuth 集成的关键：Web Client ID 用于 requestIdToken()，Android Client ID 仅用于基本信息获取
- 调试方法：通过 adb logcat 跟踪 Google Sign-In Activity 生命周期
- 版本管理：每次重要修改都更新版本号以便跟踪测试进度

### 04:45 - Web Client ID配置验证失败
- 使用Web Client ID后仍然返回RESULT_CANCELED (错误代码12501)
- 日志确认按钮点击和Google Sign-In流程正常启动
- 版本更新：v1.0.8-debug (Build 9) - Error Level Logs
- 添加ERROR级别日志成功捕获关键调试信息

### 问题分析结论
- **不是Client ID类型问题**: 使用Web Client ID仍然失败
- **可能是配置问题**: RESULT_CANCELED (12501)通常表示OAuth配置错误
- **需要检查**: Android Client ID的SHA-1指纹配置，可能需要同时配置Android和Web两个Client ID
- **关键发现**: Google Sign-In UI工作正常，问题在于OAuth验证失败

### 05:00 - google-services.json测试失败，回到正确调试路径
- 添加google-services.json文件无效果，仍然RESULT_CANCELED
- 确认不需要google-services.json（纯Google Sign-In SDK）
- 版本更新：v1.0.9-debug (Build 10) - google-services.json
- 删除不必要的google-services.json文件

### 核心问题定位
RESULT_CANCELED (错误代码12501) = Google Cloud Console OAuth配置错误
- 需要验证Android OAuth客户端的SHA-1指纹配置
- 需要验证应用包名匹配
- 问题与代码无关，纯粹是Google Console配置问题

### 14:20 - 🎉 Google Sign-In 完全修复成功！
- **根本原因发现**: OCR识别错误导致Web Client ID配置错误
- **正确配置**: `882585452174-e4ehsoof2jm9ccs3olh16t5**g**k9mtokkq.apps.googleusercontent.com` (而非5q)
- **网络连接解决**: 使用ADB端口转发 `adb reverse tcp:8001 tcp:8001` + localhost配置
- **后端配置修复**: 更新环境变量使用正确的Web Client ID
- **版本**: v1.0.11-debug (Build 12) - ADB Port Forwarding

### 完整的端到端Google登录流程测试成功 ✅
1. ✅ **Google Sign-In**: 成功获取用户账号 `proidea1992@gmail.com` 和ID Token
2. ✅ **网络通信**: Android → localhost:8001 → 后端 (ADB端口转发)
3. ✅ **后端验证**: Google ID Token验证成功 `200 OK`
4. ✅ **JWT生成**: 后端成功生成并返回访问令牌
5. ✅ **状态管理**: Android成功更新 `isLoggedIn=true`
6. ✅ **UI跳转**: 登录成功后正确跳转到主页面

### 关键技术解决方案总结
- **Google OAuth配置**: Android + Web两个Client ID正确配置
- **网络架构**: ADB端口转发解决开发环境连接问题
- **安全实现**: 纯Google OAuth (无Firebase) + JWT Token认证
- **调试方法**: adb logcat + 后端日志 + 版本号跟踪

### 里程碑成就 🏆
**第一个完整功能模块完成**: 用户认证系统
- Google OAuth 2.0 集成 ✅
- 前后端通信 ✅  
- JWT Token管理 ✅
- 状态管理和路由 ✅
